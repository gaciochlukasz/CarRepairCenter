{"version":3,"sources":["webpack:///./src/app/validators/email.validation.ts","webpack:///./src/app/validators/password.validation.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { FormControl } from '@angular/forms';\r\n\r\nexport class EmailValidation {\r\n    static EmailValid(form: FormControl) {\r\n        const email = form.value;\r\n        // tslint:disable-next-line:max-line-length\r\n        const regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n        const valid = regex.test(email);\r\n        if (!valid) {\r\n            return { WrongEmail: { valid: false } };\r\n        }\r\n    }\r\n}\r\n","import { AbstractControl, FormControl } from '@angular/forms';\r\n\r\nexport class PasswordValidation {\r\n  static MatchPassword(form: AbstractControl) {\r\n    const password = form.get('newPassword').value;\r\n    const confirmPassword = form.get('confirmPassword').value;\r\n    if (password !== confirmPassword) {\r\n      form.get('confirmPassword').setErrors({ MatchPassword: true }, { emitEvent: true });\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  static MatchRegistrationPassword(form: AbstractControl) {\r\n    const password = form.get('password').value;\r\n    const passwordRepeat = form.get('passwordRepeat').value;\r\n    if (password !== passwordRepeat) {\r\n      form.get('passwordRepeat').setErrors({ MatchPassword: true }, { emitEvent: true });\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  static ValidCharacters(passwordControl: FormControl) {\r\n    const password = passwordControl.value;\r\n    const isValid = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[^\\da-zA-Z]).{6,}$/.test(password);\r\n\r\n    if (!isValid) {\r\n      return { WrongPassword: { valid: false } };\r\n    }\r\n  }\r\n\r\n  static ValidLowerCase(passwordControl: FormControl) {\r\n    const password = passwordControl.value;\r\n    const isValid = /^(?=.*[a-z]).+$/.test(password);\r\n\r\n    if (!isValid) {\r\n      return { LowerCase: { valid: false } };\r\n    }\r\n  }\r\n\r\n  static ValidUpperCase(passwordControl: FormControl) {\r\n    const password = passwordControl.value;\r\n    const isValid = /^(?=.*[A-Z]).+$/.test(password);\r\n\r\n    if (!isValid) {\r\n      return { UpperCase: { valid: false } };\r\n    }\r\n  }\r\n\r\n  static ValidDigit(passwordControl: FormControl) {\r\n    const password = passwordControl.value;\r\n    const isValid = /^(?=.*\\d).+$/.test(password);\r\n\r\n    if (!isValid) {\r\n      return { Digit: { valid: false } };\r\n    }\r\n  }\r\n\r\n  static ValidSpecChar(passwordControl: FormControl) {\r\n    const password = passwordControl.value;\r\n    const isValid = /^(?=.*[^\\da-zA-Z]).+$/.test(password);\r\n\r\n    if (!isValid) {\r\n      return { SpecChar: { valid: false } };\r\n    }\r\n  }\r\n\r\n  static ValidLen(passwordControl: FormControl) {\r\n    const password = passwordControl.value;\r\n    const isValid = /^.{6,}$/.test(password);\r\n\r\n    if (!isValid) {\r\n      return { Len: { valid: false } };\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":""}